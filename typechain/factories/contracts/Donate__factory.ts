/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../../common'
import type { Donate, DonateInterface } from '../../contracts/Donate'

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor'
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'requested',
        type: 'uint256'
      },
      {
        internalType: 'uint256',
        name: 'available',
        type: 'uint256'
      }
    ],
    name: 'NotEnoughFunds',
    type: 'error'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'feeamount',
        type: 'uint256'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'donationamount',
        type: 'uint256'
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'recieverOrg',
        type: 'address'
      }
    ],
    name: 'Donation',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address'
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address'
      }
    ],
    name: 'OwnershipTransferred',
    type: 'event'
  },
  {
    inputs: [
      {
        internalType: 'contract IERC20',
        name: '_token',
        type: 'address'
      }
    ],
    name: 'addToken',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_newFee',
        type: 'uint256'
      }
    ],
    name: 'changeFee',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: '_jobId',
        type: 'string'
      },
      {
        internalType: 'address',
        name: '_targetAddress',
        type: 'address'
      },
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256'
      },
      {
        internalType: 'contract IERC20',
        name: '_token',
        type: 'address'
      }
    ],
    name: 'donate',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [],
    name: 'getFee',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'getTokens',
    outputs: [
      {
        internalType: 'contract IERC20[]',
        name: '',
        type: 'address[]'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address'
      }
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256'
      }
    ],
    name: 'validTokens',
    outputs: [
      {
        internalType: 'contract IERC20',
        name: '',
        type: 'address'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  }
]

const _bytecode =
  '0x6080604052600160025534801561001557600080fd5b5061001f33610055565b600180546001600160a01b031916339081179091556040518190600090600080516020610c84833981519152908290a350610093565b600080546001600160a01b038381166001600160a01b031983168117845560405191909216928391600080516020610c848339815191529190a35050565b610be2806100a26000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063b8199cbd11610066578063b8199cbd146100f4578063ced72f8714610107578063d48bfca714610118578063e9d3d16a1461013b578063f2fde38b1461014e57600080fd5b80636a1db1bf14610098578063715018a6146100ad5780638da5cb5b146100b5578063aa6ca808146100df575b600080fd5b6100ab6100a63660046108fb565b610161565b005b6100ab61017d565b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100e7610191565b6040516100d69190610914565b6100ab610102366004610997565b6101fb565b6002546040519081526020016100d6565b61012b610126366004610a73565b610638565b60405190151581526020016100d6565b6100c26101493660046108fb565b6106ab565b6100ab61015c366004610a73565b6106d5565b61016961074e565b60025481141561017857600080fd5b600255565b61018561074e565b61018f60006107a8565b565b606061019b61074e565b60038054806020026020016040519081016040528092919081815260200182805480156101f157602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101d3575b5050505050905090565b6040516370a0823160e01b815233600482015282906001600160a01b038316906370a082319060240160206040518083038186803b15801561023c57600080fd5b505afa158015610250573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102749190610a97565b10156102ba5760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b60448201526064015b60405180910390fd5b604051636eb1769f60e11b815233600482015230602482015282906001600160a01b0383169063dd62ed3e9060440160206040518083038186803b15801561030157600080fd5b505afa158015610315573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103399190610a97565b101561037e5760405162461bcd60e51b81526020600482015260146024820152734e6f7420656e6f75676820616c6c6f77616e636560601b60448201526064016102b1565b600061038960025490565b610394606485610ac6565b61039e9190610ae8565b905060006103ac8285610b07565b6001600160a01b03868116600090815260046020818152604080842081516080810183523381528084018c8152928101888152606082018f81528354600180820186559489529786902083519890970290960180546001600160a01b031916979098169690961787559151908601559251600285015590518051949550919361043b9260038501920190610862565b50506001546040516323b872dd60e01b81523360048201526001600160a01b0391821660248201526044810185905260009250908516906323b872dd90606401602060405180830381600087803b15801561049557600080fd5b505af11580156104a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cd9190610b1e565b9050806105155760405162461bcd60e51b8152602060048201526016602482015275119959481c185e5b595b9d081a185cc819985a5b195960521b60448201526064016102b1565b6040516323b872dd60e01b81523360048201526001600160a01b03878116602483015260448201849052600091908616906323b872dd90606401602060405180830381600087803b15801561056957600080fd5b505af115801561057d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a19190610b1e565b9050806105e65760405162461bcd60e51b8152602060048201526013602482015272111bdb985d1a5bdb881a185cc819985a5b1959606a1b60448201526064016102b1565b60408051858152602081018590526001600160a01b0389168183015290517fe6c8b2c0b4841288da79a2b2270034e656f4d5b859ae0dd2be4179ac21b38ea59181900360600190a15050505050505050565b600061064261074e565b61064b826107f8565b1561065857506000919050565b5060038054600180820183556000929092527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b0384161790555b919050565b600381815481106106bb57600080fd5b6000918252602090912001546001600160a01b0316905081565b6106dd61074e565b6001600160a01b0381166107425760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102b1565b61074b816107a8565b50565b6000546001600160a01b0316331461018f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102b1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000805b60035481101561085957826001600160a01b03166003828154811061082357610823610b40565b6000918252602090912001546001600160a01b031614156108475750600192915050565b8061085181610b56565b9150506107fc565b50600092915050565b82805461086e90610b71565b90600052602060002090601f01602090048101928261089057600085556108d6565b82601f106108a957805160ff19168380011785556108d6565b828001600101855582156108d6579182015b828111156108d65782518255916020019190600101906108bb565b506108e29291506108e6565b5090565b5b808211156108e257600081556001016108e7565b60006020828403121561090d57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156109555783516001600160a01b031683529284019291840191600101610930565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461074b57600080fd5b80356106a681610977565b600080600080608085870312156109ad57600080fd5b843567ffffffffffffffff808211156109c557600080fd5b818701915087601f8301126109d957600080fd5b8135818111156109eb576109eb610961565b604051601f8201601f19908116603f01168101908382118183101715610a1357610a13610961565b816040528281528a6020848701011115610a2c57600080fd5b826020860160208301376000602084830101528098505050505050610a536020860161098c565b925060408501359150610a686060860161098c565b905092959194509250565b600060208284031215610a8557600080fd5b8135610a9081610977565b9392505050565b600060208284031215610aa957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082610ae357634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610b0257610b02610ab0565b500290565b600082821015610b1957610b19610ab0565b500390565b600060208284031215610b3057600080fd5b81518015158114610a9057600080fd5b634e487b7160e01b600052603260045260246000fd5b6000600019821415610b6a57610b6a610ab0565b5060010190565b600181811c90821680610b8557607f821691505b60208210811415610ba657634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212207544bea824d85f7ad575b365afa03819e80df1a1a7dbde1fb77bca2834cfd91664736f6c634300080900338be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0'

type DonateConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: DonateConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class Donate__factory extends ContractFactory {
  constructor(...args: DonateConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<Donate> {
    return super.deploy(overrides || {}) as Promise<Donate>
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  override attach(address: string): Donate {
    return super.attach(address) as Donate
  }
  override connect(signer: Signer): Donate__factory {
    return super.connect(signer) as Donate__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): DonateInterface {
    return new utils.Interface(_abi) as DonateInterface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Donate {
    return new Contract(address, _abi, signerOrProvider) as Donate
  }
}
