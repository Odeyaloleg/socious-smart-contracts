/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export declare namespace ThankVestingManager {
  export type VestingConfigStruct = {
    share: PromiseOrValue<BigNumberish>
    cliff: PromiseOrValue<BigNumberish>
    duration: PromiseOrValue<BigNumberish>
    allocated: PromiseOrValue<BigNumberish>
  }

  export type VestingConfigStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {
    share: BigNumber
    cliff: BigNumber
    duration: BigNumber
    allocated: BigNumber
  }

  export type VestingStruct = {
    config: PromiseOrValue<BigNumberish>
    tokenVesting: PromiseOrValue<string>
    vestingConfig: ThankVestingManager.VestingConfigStruct
    canceled: PromiseOrValue<boolean>
  }

  export type VestingStructOutput = [BigNumber, string, ThankVestingManager.VestingConfigStructOutput, boolean] & {
    config: BigNumber
    tokenVesting: string
    vestingConfig: ThankVestingManager.VestingConfigStructOutput
    canceled: boolean
  }
}

export interface ThankVestingManagerInterface extends utils.Interface {
  functions: {
    'CONTRIBUTOR_CONFIG()': FunctionFragment
    'CORE_TEAM_CONFIG()': FunctionFragment
    'PRIVATE_SALE_CONFIG()': FunctionFragment
    'SEED_CONFIG()': FunctionFragment
    'availableAmount(uint256)': FunctionFragment
    'cancelVesting(address,address)': FunctionFragment
    'contributorsSharePercentage()': FunctionFragment
    'coreTeamSharePercentage()': FunctionFragment
    'createVesting(address,uint256,uint256)': FunctionFragment
    'getAVestingForABeneficiary(address,address)': FunctionFragment
    'getVestingsForABeneficiary(address)': FunctionFragment
    'owner()': FunctionFragment
    'privateSaleSharePercentage()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'seedSharePercentage()': FunctionFragment
    'thankToken()': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'vestingAddresses(address,uint256)': FunctionFragment
    'vestingConfigs(uint256)': FunctionFragment
    'vestings(address,address)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'CONTRIBUTOR_CONFIG'
      | 'CORE_TEAM_CONFIG'
      | 'PRIVATE_SALE_CONFIG'
      | 'SEED_CONFIG'
      | 'availableAmount'
      | 'cancelVesting'
      | 'contributorsSharePercentage'
      | 'coreTeamSharePercentage'
      | 'createVesting'
      | 'getAVestingForABeneficiary'
      | 'getVestingsForABeneficiary'
      | 'owner'
      | 'privateSaleSharePercentage'
      | 'renounceOwnership'
      | 'seedSharePercentage'
      | 'thankToken'
      | 'transferOwnership'
      | 'vestingAddresses'
      | 'vestingConfigs'
      | 'vestings'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'CONTRIBUTOR_CONFIG', values?: undefined): string
  encodeFunctionData(functionFragment: 'CORE_TEAM_CONFIG', values?: undefined): string
  encodeFunctionData(functionFragment: 'PRIVATE_SALE_CONFIG', values?: undefined): string
  encodeFunctionData(functionFragment: 'SEED_CONFIG', values?: undefined): string
  encodeFunctionData(functionFragment: 'availableAmount', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(
    functionFragment: 'cancelVesting',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'contributorsSharePercentage', values?: undefined): string
  encodeFunctionData(functionFragment: 'coreTeamSharePercentage', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'createVesting',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getAVestingForABeneficiary',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'getVestingsForABeneficiary', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'privateSaleSharePercentage', values?: undefined): string
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
  encodeFunctionData(functionFragment: 'seedSharePercentage', values?: undefined): string
  encodeFunctionData(functionFragment: 'thankToken', values?: undefined): string
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
  encodeFunctionData(
    functionFragment: 'vestingAddresses',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'vestingConfigs', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'vestings', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string

  decodeFunctionResult(functionFragment: 'CONTRIBUTOR_CONFIG', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'CORE_TEAM_CONFIG', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'PRIVATE_SALE_CONFIG', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'SEED_CONFIG', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'availableAmount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'cancelVesting', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'contributorsSharePercentage', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'coreTeamSharePercentage', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'createVesting', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getAVestingForABeneficiary', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getVestingsForABeneficiary', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'privateSaleSharePercentage', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'seedSharePercentage', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'thankToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'vestingAddresses', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'vestingConfigs', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'vestings', data: BytesLike): Result

  events: {
    'OwnershipTransferred(address,address)': EventFragment
    'VestingCanceled(address,uint256,uint256,address)': EventFragment
    'VestingCreated(address,uint256,uint256,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'VestingCanceled'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'VestingCreated'): EventFragment
}

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface VestingCanceledEventObject {
  beneficiary: string
  _amount: BigNumber
  _config: BigNumber
  tokenVesting: string
}
export type VestingCanceledEvent = TypedEvent<[string, BigNumber, BigNumber, string], VestingCanceledEventObject>

export type VestingCanceledEventFilter = TypedEventFilter<VestingCanceledEvent>

export interface VestingCreatedEventObject {
  beneficiary: string
  _amount: BigNumber
  _config: BigNumber
  tokenVesting: string
}
export type VestingCreatedEvent = TypedEvent<[string, BigNumber, BigNumber, string], VestingCreatedEventObject>

export type VestingCreatedEventFilter = TypedEventFilter<VestingCreatedEvent>

export interface ThankVestingManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: ThankVestingManagerInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    CONTRIBUTOR_CONFIG(overrides?: CallOverrides): Promise<[BigNumber]>

    CORE_TEAM_CONFIG(overrides?: CallOverrides): Promise<[BigNumber]>

    PRIVATE_SALE_CONFIG(overrides?: CallOverrides): Promise<[BigNumber]>

    SEED_CONFIG(overrides?: CallOverrides): Promise<[BigNumber]>

    availableAmount(_config: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>

    cancelVesting(
      _beneficiary: PromiseOrValue<string>,
      _tokenVesting: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    contributorsSharePercentage(overrides?: CallOverrides): Promise<[BigNumber]>

    coreTeamSharePercentage(overrides?: CallOverrides): Promise<[BigNumber]>

    createVesting(
      _beneficiary: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _config: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getAVestingForABeneficiary(
      _beneficiary: PromiseOrValue<string>,
      _tokenVesting: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ThankVestingManager.VestingStructOutput]>

    getVestingsForABeneficiary(_beneficiary: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string[]]>

    owner(overrides?: CallOverrides): Promise<[string]>

    privateSaleSharePercentage(overrides?: CallOverrides): Promise<[BigNumber]>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    seedSharePercentage(overrides?: CallOverrides): Promise<[BigNumber]>

    thankToken(overrides?: CallOverrides): Promise<[string]>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    vestingAddresses(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>

    vestingConfigs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        share: BigNumber
        cliff: BigNumber
        duration: BigNumber
        allocated: BigNumber
      }
    >

    vestings(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, ThankVestingManager.VestingConfigStructOutput, boolean] & {
        config: BigNumber
        tokenVesting: string
        vestingConfig: ThankVestingManager.VestingConfigStructOutput
        canceled: boolean
      }
    >
  }

  CONTRIBUTOR_CONFIG(overrides?: CallOverrides): Promise<BigNumber>

  CORE_TEAM_CONFIG(overrides?: CallOverrides): Promise<BigNumber>

  PRIVATE_SALE_CONFIG(overrides?: CallOverrides): Promise<BigNumber>

  SEED_CONFIG(overrides?: CallOverrides): Promise<BigNumber>

  availableAmount(_config: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

  cancelVesting(
    _beneficiary: PromiseOrValue<string>,
    _tokenVesting: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  contributorsSharePercentage(overrides?: CallOverrides): Promise<BigNumber>

  coreTeamSharePercentage(overrides?: CallOverrides): Promise<BigNumber>

  createVesting(
    _beneficiary: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _config: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  getAVestingForABeneficiary(
    _beneficiary: PromiseOrValue<string>,
    _tokenVesting: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ThankVestingManager.VestingStructOutput>

  getVestingsForABeneficiary(_beneficiary: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>

  owner(overrides?: CallOverrides): Promise<string>

  privateSaleSharePercentage(overrides?: CallOverrides): Promise<BigNumber>

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  seedSharePercentage(overrides?: CallOverrides): Promise<BigNumber>

  thankToken(overrides?: CallOverrides): Promise<string>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  vestingAddresses(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>

  vestingConfigs(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      share: BigNumber
      cliff: BigNumber
      duration: BigNumber
      allocated: BigNumber
    }
  >

  vestings(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, ThankVestingManager.VestingConfigStructOutput, boolean] & {
      config: BigNumber
      tokenVesting: string
      vestingConfig: ThankVestingManager.VestingConfigStructOutput
      canceled: boolean
    }
  >

  callStatic: {
    CONTRIBUTOR_CONFIG(overrides?: CallOverrides): Promise<BigNumber>

    CORE_TEAM_CONFIG(overrides?: CallOverrides): Promise<BigNumber>

    PRIVATE_SALE_CONFIG(overrides?: CallOverrides): Promise<BigNumber>

    SEED_CONFIG(overrides?: CallOverrides): Promise<BigNumber>

    availableAmount(_config: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    cancelVesting(
      _beneficiary: PromiseOrValue<string>,
      _tokenVesting: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    contributorsSharePercentage(overrides?: CallOverrides): Promise<BigNumber>

    coreTeamSharePercentage(overrides?: CallOverrides): Promise<BigNumber>

    createVesting(
      _beneficiary: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _config: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>

    getAVestingForABeneficiary(
      _beneficiary: PromiseOrValue<string>,
      _tokenVesting: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ThankVestingManager.VestingStructOutput>

    getVestingsForABeneficiary(_beneficiary: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>

    owner(overrides?: CallOverrides): Promise<string>

    privateSaleSharePercentage(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    seedSharePercentage(overrides?: CallOverrides): Promise<BigNumber>

    thankToken(overrides?: CallOverrides): Promise<string>

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    vestingAddresses(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>

    vestingConfigs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        share: BigNumber
        cliff: BigNumber
        duration: BigNumber
        allocated: BigNumber
      }
    >

    vestings(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, ThankVestingManager.VestingConfigStructOutput, boolean] & {
        config: BigNumber
        tokenVesting: string
        vestingConfig: ThankVestingManager.VestingConfigStructOutput
        canceled: boolean
      }
    >
  }

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter

    'VestingCanceled(address,uint256,uint256,address)'(
      beneficiary?: null,
      _amount?: null,
      _config?: null,
      tokenVesting?: null
    ): VestingCanceledEventFilter
    VestingCanceled(beneficiary?: null, _amount?: null, _config?: null, tokenVesting?: null): VestingCanceledEventFilter

    'VestingCreated(address,uint256,uint256,address)'(
      beneficiary?: null,
      _amount?: null,
      _config?: null,
      tokenVesting?: null
    ): VestingCreatedEventFilter
    VestingCreated(beneficiary?: null, _amount?: null, _config?: null, tokenVesting?: null): VestingCreatedEventFilter
  }

  estimateGas: {
    CONTRIBUTOR_CONFIG(overrides?: CallOverrides): Promise<BigNumber>

    CORE_TEAM_CONFIG(overrides?: CallOverrides): Promise<BigNumber>

    PRIVATE_SALE_CONFIG(overrides?: CallOverrides): Promise<BigNumber>

    SEED_CONFIG(overrides?: CallOverrides): Promise<BigNumber>

    availableAmount(_config: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    cancelVesting(
      _beneficiary: PromiseOrValue<string>,
      _tokenVesting: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    contributorsSharePercentage(overrides?: CallOverrides): Promise<BigNumber>

    coreTeamSharePercentage(overrides?: CallOverrides): Promise<BigNumber>

    createVesting(
      _beneficiary: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _config: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    getAVestingForABeneficiary(
      _beneficiary: PromiseOrValue<string>,
      _tokenVesting: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getVestingsForABeneficiary(_beneficiary: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    privateSaleSharePercentage(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    seedSharePercentage(overrides?: CallOverrides): Promise<BigNumber>

    thankToken(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    vestingAddresses(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    vestingConfigs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    vestings(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    CONTRIBUTOR_CONFIG(overrides?: CallOverrides): Promise<PopulatedTransaction>

    CORE_TEAM_CONFIG(overrides?: CallOverrides): Promise<PopulatedTransaction>

    PRIVATE_SALE_CONFIG(overrides?: CallOverrides): Promise<PopulatedTransaction>

    SEED_CONFIG(overrides?: CallOverrides): Promise<PopulatedTransaction>

    availableAmount(_config: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    cancelVesting(
      _beneficiary: PromiseOrValue<string>,
      _tokenVesting: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    contributorsSharePercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>

    coreTeamSharePercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>

    createVesting(
      _beneficiary: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _config: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    getAVestingForABeneficiary(
      _beneficiary: PromiseOrValue<string>,
      _tokenVesting: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getVestingsForABeneficiary(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    privateSaleSharePercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    seedSharePercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>

    thankToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    vestingAddresses(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    vestingConfigs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    vestings(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
