/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export interface DonateInterface extends utils.Interface {
  functions: {
    'addToken(address)': FunctionFragment
    'changeFee(uint256)': FunctionFragment
    'donate(string,address,uint256,address)': FunctionFragment
    'getFee()': FunctionFragment
    'getTokens()': FunctionFragment
    'owner()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'validTokens(uint256)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'addToken'
      | 'changeFee'
      | 'donate'
      | 'getFee'
      | 'getTokens'
      | 'owner'
      | 'renounceOwnership'
      | 'transferOwnership'
      | 'validTokens'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'addToken', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'changeFee', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(
    functionFragment: 'donate',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'getFee', values?: undefined): string
  encodeFunctionData(functionFragment: 'getTokens', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'validTokens', values: [PromiseOrValue<BigNumberish>]): string

  decodeFunctionResult(functionFragment: 'addToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'changeFee', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'donate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getFee', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getTokens', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'validTokens', data: BytesLike): Result

  events: {
    'Donation(uint256,uint256,address)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Donation'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export interface DonationEventObject {
  feeamount: BigNumber
  donationamount: BigNumber
  recieverOrg: string
}
export type DonationEvent = TypedEvent<[BigNumber, BigNumber, string], DonationEventObject>

export type DonationEventFilter = TypedEventFilter<DonationEvent>

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface Donate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: DonateInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    addToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    changeFee(
      _newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    donate(
      _jobId: PromiseOrValue<string>,
      _targetAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getFee(overrides?: CallOverrides): Promise<[BigNumber]>

    getTokens(overrides?: CallOverrides): Promise<[string[]]>

    owner(overrides?: CallOverrides): Promise<[string]>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    validTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>
  }

  addToken(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  changeFee(
    _newFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  donate(
    _jobId: PromiseOrValue<string>,
    _targetAddress: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  getFee(overrides?: CallOverrides): Promise<BigNumber>

  getTokens(overrides?: CallOverrides): Promise<string[]>

  owner(overrides?: CallOverrides): Promise<string>

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  validTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

  callStatic: {
    addToken(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    changeFee(_newFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    donate(
      _jobId: PromiseOrValue<string>,
      _targetAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    getFee(overrides?: CallOverrides): Promise<BigNumber>

    getTokens(overrides?: CallOverrides): Promise<string[]>

    owner(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    validTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>
  }

  filters: {
    'Donation(uint256,uint256,address)'(
      feeamount?: null,
      donationamount?: null,
      recieverOrg?: null
    ): DonationEventFilter
    Donation(feeamount?: null, donationamount?: null, recieverOrg?: null): DonationEventFilter

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
  }

  estimateGas: {
    addToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    changeFee(
      _newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    donate(
      _jobId: PromiseOrValue<string>,
      _targetAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    getFee(overrides?: CallOverrides): Promise<BigNumber>

    getTokens(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    validTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    addToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    changeFee(
      _newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    donate(
      _jobId: PromiseOrValue<string>,
      _targetAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    getFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    validTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
